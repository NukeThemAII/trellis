#!/usr/bin/env node
import { readFileSync, writeFileSync, mkdirSync, existsSync } from "fs";
import { dirname, join } from "path";
import { fileURLToPath } from "url";
import prettier from "prettier";

const __dirname = dirname(fileURLToPath(import.meta.url));
const repoRoot = join(__dirname, "..");

const contracts = [
  {
    name: "TrellisVault",
    artifact: join(repoRoot, "contracts", "out", "TrellisVault.sol", "TrellisVault.json"),
    exportName: "trellisVaultAbi",
  },
  {
    name: "StrategyERC4626",
    artifact: join(repoRoot, "contracts", "out", "StrategyERC4626.sol", "StrategyERC4626.json"),
    exportName: "strategyErc4626Abi",
  },
];

const outputDir = join(repoRoot, "frontend", "contracts", "abi");

function ensureArtifactsPresent(entries) {
  const missing = entries.filter(({ artifact }) => !existsSync(artifact));
  if (missing.length > 0) {
    const names = missing.map(({ name }) => `- ${name}: ${artifactRelativePath(artifact)}`).join("\n");
    throw new Error(
      `Missing build artifacts for:\n${names}\nRun "pnpm contracts:build" (or "forge build") before generating ABIs.`,
    );
  }
}

function artifactRelativePath(artifactPath) {
  return artifactPath.replace(`${repoRoot}${join.sep}`, "");
}

function loadAbi(artifactPath) {
  const raw = readFileSync(artifactPath, "utf8");
  const json = JSON.parse(raw);
  return json.abi ?? [];
}

async function formatTs(source) {
  return prettier.format(source, { parser: "typescript" });
}

async function main() {
  ensureArtifactsPresent(contracts);
  mkdirSync(outputDir, { recursive: true });

  for (const { name, artifact, exportName } of contracts) {
    const abi = loadAbi(artifact);
    const output = await formatTs(
      [
        "/**",
        ` * ABI for ${name} (auto-generated by scripts/generate-frontend-abis.mjs).`,
        " * Do not edit manually.",
        " */",
        `export const ${exportName} = ${JSON.stringify(abi, null, 2)} as const;`,
        `export type ${name}Abi = typeof ${exportName};`,
        "",
      ].join("\n"),
    );

    const outputPath = join(outputDir, `${exportName}.ts`);
    writeFileSync(outputPath, output);
    console.log(`âœ” Wrote ${artifactRelativePath(outputPath)}`);
  }
}

try {
  await main();
} catch (error) {
  console.error(error instanceof Error ? error.message : error);
  process.exit(1);
}
